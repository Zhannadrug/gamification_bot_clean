# -*- coding: utf-8 -*-
"""bot_gamification

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f3vAOBW5aKg5aM4LFH21QcMSDavYlrAa
"""

!pip install aiogram==2.25.2 gspread oauth2client nest_asyncio

!pip install aiocron

# === –ò–º–ø–æ—Ä—Ç—ã ===
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
import logging
import nest_asyncio
import random
import asyncio
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import aiocron
from datetime import datetime, timedelta
import pytz

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
API_TOKEN = '7927451877:AAE3zEyNcNTXTjTqwUCa3nc_xomAPKVewDc'

bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

nest_asyncio.apply()

# === –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å ===
user_data = {}
daily_points = {}

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("/content/credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open("GamificationData").worksheet("–ë–∞–ª–ª—ã")

# === –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ ===
def update_progress(user_id, username=None, day=None, points=0, badge=None):
    users = sheet.col_values(1)
    if str(user_id) in users:
        row = users.index(str(user_id)) + 1
    else:
        row = len(users) + 1
        sheet.update_cell(row, 1, str(user_id))
        sheet.update_cell(row, 2, "")
        sheet.update_cell(row, 3, username or "–ù–µ—Ç username")
        sheet.update_cell(row, 4, "0")
        sheet.update_cell(row, 5, "")

    if day:
        days = sheet.cell(row, 2).value or ""
        if str(day) not in days:
            new_days = days + f" {day}" if days else str(day)
            sheet.update_cell(row, 2, new_days)

    if points:
        current_points = int(sheet.cell(row, 4).value or 0)
        sheet.update_cell(row, 4, current_points + points)
        daily_points[str(user_id)] = daily_points.get(str(user_id), 0) + points

    if badge:
        badges = sheet.cell(row, 5).value or ""
        if badge not in badges:
            new_badges = badges + f", {badge}" if badges else badge
            sheet.update_cell(row, 5, new_badges)

# === –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
@dp.message_handler(commands=['start'])
async def start_message(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ—Ç username"
    update_progress(user_id, username=username)

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton(text="üìã –ó–∞–¥–∞–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞", url="https://t.me/c/2529786741/15"),
        types.InlineKeyboardButton(text="üí¨ –ß–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏", url="https://t.me/c/2529786741/22")
    )
    keyboard.add(
        types.InlineKeyboardButton(text="üë• –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ", url="https://t.me/c/2529786741/26"),
        types.InlineKeyboardButton(text="üé• –ó–∞–ø–∏—Å–∏ —ç—Ñ–∏—Ä–æ–≤", url="https://t.me/c/2529786741/20")
    )
    keyboard.add(
        types.InlineKeyboardButton(text="üéÄ –ë–æ–Ω—É—Å—ã", url="https://t.me/c/2529786741/24"),
        types.InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", url="https://t.me/c/2529786741/41")
    )
    keyboard.add(
        types.InlineKeyboardButton(text="üéÅ –í–∏—Ç—Ä–∏–Ω–∞ –ø—Ä–∏–∑–æ–≤", url="https://t.me/c/2529786741/48")
    )

    await message.answer("‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–µ–ª–ª–µ–Ω–¥–∂ \"–í—ã –≠–¢–û –º–æ–∂–µ—Ç–µ\"!\n\n–í—ã–±–∏—Ä–∞–π—Ç–µ —Ç–µ–º—É –≤ –º–µ–Ω—é —Å–Ω–∏–∑—É üëá", reply_markup=keyboard)

# === –ö–æ–º–∞–Ω–¥–∞ /spin –¥–ª—è –ö–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω—ã ===
@dp.message_handler(commands=['spin'])
async def spin_wheel(message: types.Message):
    user_id = message.from_user.id
    users = sheet.col_values(1)
    if str(user_id) in users:
        row = users.index(str(user_id)) + 1
        current_points = int(sheet.cell(row, 4).value or 0)
        if current_points < 50:
            await message.answer("‚ö° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ö–æ–ª–µ—Å–∞ –§–æ—Ä—Ç—É–Ω—ã –Ω—É–∂–Ω–æ –Ω–∞–±—Ä–∞—Ç—å –º–∏–Ω–∏–º—É–º 50 –±–∞–ª–ª–æ–≤! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–æ—è–≤–ª—è—Ç—å—Å—è!")
            return

    prizes = ["+10 –±–∞–ª–ª–æ–≤", "+20 –±–∞–ª–ª–æ–≤", "–ë–µ–π–¥–∂ üåü –ü—Ä–æ—è–≤–ª–µ–Ω–Ω–æ—Å—Ç—å", "–ë–µ–π–¥–∂ üöÄ –ü—Ä–æ—Ä—ã–≤"]
    prize = random.choice(prizes)

    if "+10" in prize:
        update_progress(user_id, points=10)
    elif "+20" in prize:
        update_progress(user_id, points=20)
    else:
        badge_name = prize.replace("–ë–µ–π–¥–∂ ", "")
        update_progress(user_id, badge=badge_name)

    await message.answer(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –≤—ã–∏–≥—Ä–∞–ª–∞ {prize}! üéÅ")

# === –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –ø–æ —Ç–µ–º–∞–º ===
@dp.message_handler(lambda message: message.chat.type in ["group", "supergroup"])
async def handle_group_message(message: types.Message):
    user_id = message.from_user.id
    thread_id = str(message.message_thread_id)

    if thread_id == "26":
        update_progress(user_id, points=10)
    elif thread_id == "15":
        update_progress(user_id, points=15)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ===
@dp.message_handler(commands=['profile'])
async def profile_command(message: types.Message):
    await message.answer("üë§ –í–∞—à –ü—Ä–æ—Ñ–∏–ª—å: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ –±–∞–ª–ª—ã, –±–µ–π–¥–∂–∏ –∏ —É—Å–ø–µ—Ö–∏! –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ: https://t.me/c/2529786741/41")

@dp.message_handler(commands=['vitrina'])
async def vitrina_command(message: types.Message):
    await message.answer("üéÅ –í–∏—Ç—Ä–∏–Ω–∞ –ø—Ä–∏–∑–æ–≤: –æ–±–º–µ–Ω–∏–≤–∞–π—Ç–µ –±–∞–ª–ª—ã –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏! –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ: https://t.me/c/2529786741/48")

# === –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ª–∞–π–∫–∏ ===
@dp.callback_query_handler()
async def handle_reaction(callback_query: types.CallbackQuery):
    if callback_query.data in ["üëç", "‚ù§Ô∏è", "üî•"]:
        message = callback_query.message
        if message.reply_to_message:
            reacted_user_id = message.reply_to_message.from_user.id
            update_progress(reacted_user_id, points=5)
            await bot.answer_callback_query(callback_query.id, text="üéâ +5 –±–∞–ª–ª–æ–≤ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–∞!", show_alert=False)

# === –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∏—Ç–æ–≥–æ–≤ –≤ 22:00 –ú–°–ö ===
@aiocron.crontab('0 22 * * *')
async def send_daily_summary():
    moscow_tz = pytz.timezone('Europe/Moscow')
    now = datetime.now(moscow_tz)
    for user_id, points in daily_points.items():
        if points > 0:
            try:
                await bot.send_message(user_id, f"‚ú® –ò—Ç–æ–≥–∏ –¥–Ω—è ({now.strftime('%d.%m.%Y')}):\n–°–µ–≥–æ–¥–Ω—è —Ç—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∞ {points} –±–∞–ª–ª–æ–≤! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üî•")
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")
    daily_points.clear()

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)